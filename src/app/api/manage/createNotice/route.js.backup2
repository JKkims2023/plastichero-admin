import { NextResponse } from 'next/server';
import { getConnection } from '../../../lib/db';
import sharp from 'sharp';
import { uploadToS3, optimizeAndUploadImage } from '../../../lib/s3Config';
import path from 'path';

// 이미지 최적화 함수
async function optimizeImage(filePath) {
    const optimizedPath = filePath.replace(/\.\w+$/, '_optimized.jpg');
    await sharp(filePath)
        .resize(1200, 1200, { fit: 'inside', withoutEnlargement: true })
        .jpeg({ quality: 80 })
        .toFile(optimizedPath);
    return path.basename(optimizedPath);
}

export async function POST(req) {
    try {
        console.log('공지사항 등록 요청 시작');
        const formData = await req.formData();
        
        const title = formData.get('title');
        const description = formData.get('description');
        const commentEnabled = formData.get('comment_flag');
        
        console.log('폼 데이터 받음:', { title: title?.substring(0, 20), commentEnabled });
        
        if (!title || !description) {
            return NextResponse.json({
                result: 'error',
                message: '제목과 내용은 필수 입력사항입니다.'
            }, { status: 400 });
        }

        const connection = await getConnection();
        console.log('DB 연결 성공');

        // 파일 경로 저장을 위한 객체
        const fileData = {};
        let uploadErrors = [];

        // 이미지 파일 처리
        for (let i = 1; i <= 5; i++) {
            const imageFile = formData.get(`image${i}`);
            if (imageFile && typeof imageFile !== 'string') {
                console.log(`이미지 ${i} 처리 시작:`, imageFile.name);
                const fileName = `image${i}-${Date.now()}${path.extname(imageFile.name)}`;
                
                // 파일 버퍼로 변환
                const bytes = await imageFile.arrayBuffer();
                const buffer = Buffer.from(bytes);
                
                // 이미지 최적화 및 S3 업로드
                const sharpInstance = sharp(buffer);
                const uploadResult = await optimizeAndUploadImage(sharpInstance, fileName, 'images');
                
                if (uploadResult.success) {
                    console.log(`이미지 ${i} 업로드 성공:`, uploadResult.key);
                    console.log(`이미지 ${i} URL:`, uploadResult.url);
                    // S3에 업로드된 파일의 전체 URL을 DB에 저장
                    fileData[`notice_picture${i > 1 ? i : ''}`] = uploadResult.url;
                } else {
                    console.error(`이미지 ${i} 업로드 실패:`, uploadResult.error);
                    uploadErrors.push(`이미지 ${i} 업로드 실패: ${uploadResult.error}`);
                }
            }
        }

        // 비디오 파일 처리
        const videoFile = formData.get('video');
        if (videoFile && typeof videoFile !== 'string') {
            console.log('비디오 처리 시작:', videoFile.name);
            const fileName = `video-${Date.now()}${path.extname(videoFile.name)}`;
            
            // 파일 버퍼로 변환
            const bytes = await videoFile.arrayBuffer();
            const buffer = Buffer.from(bytes);
            
            // S3에 직접 업로드
            const uploadResult = await uploadToS3(
                buffer, 
                fileName, 
                videoFile.type, 
                'videos'
            );
            
            if (uploadResult.success) {
                console.log('비디오 업로드 성공:', uploadResult.key);
                console.log('비디오 URL:', uploadResult.url);
                // S3에 업로드된 파일의 전체 URL을 DB에 저장
                fileData.notice_movie = uploadResult.url;
            } else {
                console.error('비디오 업로드 실패:', uploadResult.error);
                uploadErrors.push(`비디오 업로드 실패: ${uploadResult.error}`);
            }
        }

        // DB 삽입
        const insertData = {
            notice_title: title,
            notice_desctription: description,
            notice_type: '0',
            comment_flag: commentEnabled,
            reg_date: new Date(),
            delete_flag: 'N',
            ...fileData
        };

        console.log('DB 삽입 데이터 준비:', Object.keys(insertData));
        const insertQuery = 'INSERT INTO g5_notice SET ?';
        const [result] = await connection.query(insertQuery, [insertData]);
        console.log('DB 삽입 성공');

        connection.release();

        // 업로드 오류가 있었다면 경고 메시지와 함께 성공 응답
        if (uploadErrors.length > 0) {
            return NextResponse.json({ 
                success: true,
                message: '공지사항이 등록되었으나, 일부 파일 업로드에 실패했습니다.',
                warnings: uploadErrors,
                result_data: result
            });
        }

        return NextResponse.json({ 
            success: true,
            message: '공지사항이 성공적으로 등록되었습니다.',
            result_data: result
        });

    } catch (error) {
        console.error('공지사항 등록 중 오류:', error);
        return NextResponse.json({ 
            success: false,
            message: '공지사항 등록 중 오류가 발생했습니다.',
            error: error.message
        }, { status: 500 });
    }
} 