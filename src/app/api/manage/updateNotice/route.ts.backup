import { NextRequest, NextResponse } from 'next/server';
import { getConnection } from '../../../lib/db';
import sharp from 'sharp';
import { uploadToS3, optimizeAndUploadImage } from '../../../lib/s3Config';
import path from 'path';

// 이미지 최적화 함수
async function optimizeImage(filePath: string) {
    const optimizedPath = filePath.replace(/\.\w+$/, '_optimized.jpg');
    await sharp(filePath)
        .resize(1200, 1200, { fit: 'inside', withoutEnlargement: true })
        .jpeg({ quality: 80 })
        .toFile(optimizedPath);
    return path.basename(optimizedPath);
}

// POST 메서드 핸들러
export async function POST(req: NextRequest) {
    try {
        console.log('공지사항 수정 요청 시작');
        const formData = await req.formData();
        
        const noticeId = formData.get('noticeId') as string;
        const title = formData.get('title') as string;
        const description = formData.get('description') as string;
        const commentEnabled = formData.get('comment_flag') as string;
        
        // 삭제할 이미지 키 목록
        const imageKeysToRemoveStr = formData.get('imageKeysToRemove') as string;
        const imageKeysToRemove = imageKeysToRemoveStr ? JSON.parse(imageKeysToRemoveStr) : [];
        
        // 비디오 삭제 여부
        const removeVideo = formData.get('removeVideo') === 'true';

        console.log('폼 데이터 받음:', { 
            noticeId, 
            title: title?.substring(0, 20), 
            commentEnabled,
            imageKeysToRemove,
            removeVideo
        });

        if (!noticeId || !title || !description) {
            return NextResponse.json({
                success: false,
                message: '공지사항 ID, 제목과 내용은 필수 입력사항입니다.'
            }, { status: 400 });
        }

        const connection = await getConnection();
        console.log('DB 연결 성공');

        // 기존 파일 정보 조회
        const [existingNoticeResult] = await connection.execute(
            'SELECT notice_picture, notice_picture2, notice_picture3, notice_picture4, notice_picture5, notice_movie FROM g5_notice WHERE notice_no = ?',
            [noticeId]
        );
        console.log('기존 공지사항 조회 성공');
        
        const existingNotice = (existingNoticeResult as any[])[0];

        // 새로운 파일 경로 저장을 위한 객체
        const fileData: Record<string, any> = {};
        let uploadErrors: string[] = [];

        // 삭제할 이미지 키 처리
        if (imageKeysToRemove && imageKeysToRemove.length > 0) {
            console.log('삭제할 이미지 키:', imageKeysToRemove);
            imageKeysToRemove.forEach((key: string) => {
                fileData[key] = null; // null로 설정하여 DB에서 삭제
            });
        }
        
        // 비디오 삭제 처리
        if (removeVideo) {
            console.log('비디오 삭제 요청 처리');
            fileData.notice_movie = null;
        }

        // 이미지 파일 처리
        for (let i = 1; i <= 5; i++) {
            const imageFile = formData.get(`image${i}`);
            if (imageFile && typeof imageFile !== 'string') {
                console.log(`이미지 ${i} 처리 시작:`, (imageFile as File).name);
                const fileName = `image${i}-${Date.now()}${path.extname((imageFile as File).name)}`;
                
                // 파일 버퍼로 변환
                const bytes = await imageFile.arrayBuffer();
                const buffer = Buffer.from(bytes);
                
                // 이미지 최적화 및 S3 업로드
                const sharpInstance = sharp(buffer);
                const uploadResult = await optimizeAndUploadImage(sharpInstance, fileName, 'images');
                
                if (uploadResult.success) {
                    console.log(`이미지 ${i} 업로드 성공:`, uploadResult.key);
                    console.log(`이미지 ${i} URL:`, uploadResult.url);
                    // S3에 업로드된 파일의 전체 URL을 DB에 저장
                    fileData[`notice_picture${i > 1 ? i : ''}`] = uploadResult.url;
                } else {
                    console.error(`이미지 ${i} 업로드 실패:`, uploadResult.error);
                    uploadErrors.push(`이미지 ${i} 업로드 실패: ${uploadResult.error}`);
                }
            }
        }

        // 비디오 파일 처리
        const videoFile = formData.get('video');
        if (videoFile && typeof videoFile !== 'string') {
            console.log('비디오 처리 시작:', (videoFile as File).name);
            const fileName = `video-${Date.now()}${path.extname((videoFile as File).name)}`;
            
            // 파일 버퍼로 변환
            const bytes = await videoFile.arrayBuffer();
            const buffer = Buffer.from(bytes);
            
            // S3에 직접 업로드
            const uploadResult = await uploadToS3(
                buffer, 
                fileName, 
                videoFile.type, 
                'videos'
            );
            
            if (uploadResult.success) {
                console.log('비디오 업로드 성공:', uploadResult.key);
                console.log('비디오 URL:', uploadResult.url);
                // S3에 업로드된 파일의 전체 URL을 DB에 저장
                fileData.notice_movie = uploadResult.url;
            } else {
                console.error('비디오 업로드 실패:', uploadResult.error);
                uploadErrors.push(`비디오 업로드 실패: ${uploadResult.error}`);
            }
        }

        // DB 업데이트를 위한 데이터 준비
        const updateData = {
            notice_title: title,
            notice_desctription: description,
            comment_flag: commentEnabled,
            ...fileData
        };

        console.log('DB 업데이트 데이터 준비:', Object.keys(updateData));
        console.log('이미지/비디오 필드 업데이트:', fileData);

        // SQL 쿼리 생성
        let updateQuery = 'UPDATE g5_notice SET ';
        const updateValues = [];
        const queryParts = [];
        
        Object.entries(updateData).forEach(([key, value]) => {
            if (value === null) {
                queryParts.push(`${key} = NULL`);
            } else {
                queryParts.push(`${key} = ?`);
                updateValues.push(value);
            }
        });
        
        updateQuery += queryParts.join(', ');
        updateQuery += ' WHERE notice_no = ?';
        updateValues.push(noticeId);

        console.log('실행 쿼리:', updateQuery);
        
        // 쿼리 실행
        const [result] = await connection.execute(updateQuery, updateValues);
        console.log('DB 업데이트 성공');

        connection.release(); // 연결 반환

        // 업로드 오류가 있었다면 경고 메시지와 함께 성공 응답
        if (uploadErrors.length > 0) {
            return NextResponse.json({ 
                success: true, 
                message: '공지사항이 수정되었으나, 일부 파일 업로드에 실패했습니다.',
                warnings: uploadErrors,
                result_data: result
            });
        }

        return NextResponse.json({ 
            success: true,
            message: '공지사항이 성공적으로 수정되었습니다.',
            result_data: result
        });

    } catch (error: any) {
        console.error('공지사항 수정 중 오류:', error);
        return NextResponse.json({ 
            success: false, 
            message: '공지사항 수정 중 오류가 발생했습니다.',
            error: error.message
        }, { status: 500 });
    }
}

// GET 메서드 핸들러 (필요한 경우)
export async function GET() {
    return NextResponse.json({ message: 'Method not allowed' }, { status: 405 });
} 