import { S3Client } from '@aws-sdk/client-s3';
import { Upload } from '@aws-sdk/lib-storage';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { GetObjectCommand, PutObjectCommand } from '@aws-sdk/client-s3';

// S3 설정 정보 (환경 변수 사용)
const S3_CONFIG = {
  region: process.env.AWS_REGION || 'ap-northeast-2',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
  bucketName: process.env.S3_BUCKET_NAME || 'plastichero-assets'
};

// 설정 로그 기록
console.log('S3 설정 정보:', { 
  region: S3_CONFIG.region, 
  bucketName: S3_CONFIG.bucketName,
  baseUrl: `https://${S3_CONFIG.bucketName}.s3.${S3_CONFIG.region}.amazonaws.com`
});

// S3 버킷의 기본 URL을 생성
const S3_BASE_URL = `https://${S3_CONFIG.bucketName}.s3.${S3_CONFIG.region}.amazonaws.com`;

// S3 클라이언트 객체 생성
export const s3Client = new S3Client({
  region: S3_CONFIG.region,
  credentials: S3_CONFIG.credentials
});

// S3에 파일 업로드 함수
export async function uploadToS3(fileBuffer, fileName, contentType, folder = 'uploads') {
  try {
    const key = `${folder}/${Date.now()}-${fileName.replace(/[^\w\d.]/g, '_')}`;
    
    const upload = new Upload({
      client: s3Client,
      params: {
        Bucket: S3_CONFIG.bucketName,
        Key: key,
        Body: fileBuffer,
        ContentType: contentType
      }
    });

    const result = await upload.done();
    console.log(`파일 업로드 성공: ${key}`);
    
    // 파일의 전체 URL을 생성
    const fileUrl = `${S3_BASE_URL}/${key}`;
    
    return {
      key: key,
      url: fileUrl,
      location: fileUrl, // 전체 URL을 location으로도 제공 (for_my_hero와 호환)
      success: true
    };
  } catch (error) {
    console.error('S3 업로드 오류:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// S3에서 파일의 서명된 URL 가져오기
export async function getSignedFileUrl(key, expiresIn = 3600) {
  try {
    const command = new GetObjectCommand({
      Bucket: S3_CONFIG.bucketName,
      Key: key,
    });
    
    const url = await getSignedUrl(s3Client, command, { expiresIn });
    return { url, success: true };
  } catch (error) {
    console.error('S3 URL 생성 오류:', error);
    return { success: false, error: error.message };
  }
}

// 파일 키에서 전체 URL 생성
export function getFileUrlFromKey(key) {
  if (!key) return '';
  return `${S3_BASE_URL}/${key}`;
}

// 이미지 최적화 후 S3에 업로드하는 함수
export async function optimizeAndUploadImage(sharpInstance, fileName, folder = 'images') {
  try {
    // 최적화된 이미지 버퍼 생성
    const buffer = await sharpInstance
      .resize(1200, 1200, { fit: 'inside', withoutEnlargement: true })
      .jpeg({ quality: 80 })
      .toBuffer();

    // 최적화된 파일명 생성
    const optimizedFileName = fileName.replace(/\.\w+$/, '_optimized.jpg');
    
    // S3에 업로드
    return await uploadToS3(buffer, optimizedFileName, 'image/jpeg', folder);
  } catch (error) {
    console.error('이미지 최적화 및 업로드 오류:', error);
    return { success: false, error: error.message };
  }
} 